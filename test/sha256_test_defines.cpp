#include <gtest/gtest.h>

#include "sha256.hpp"

TEST(sha256, Rotation_func)
{
	// Test cases for ROTL
	EXPECT_EQ(ROTL(0x00000000u, 1), 0x00000000u);		// check if 0 stays 0
	EXPECT_EQ(ROTL(0xFFFFFFFFu, 1), 0xFFFFFFFFu);		// check if -1 stays -1
	EXPECT_EQ(ROTL(0xFFFFFFFFu, 20), 0xFFFFFFFFu);		// check if -1 stays -1
	EXPECT_EQ(ROTL(0x00000001u, 1), 0x00000002u);		// standard check
	EXPECT_EQ(ROTL(0x40000000u, 1), 0x80000000u);		// standard check higher value

	EXPECT_EQ(ROTL(0x80000000u, 1), 0x00000001u);		// overflow the input
	EXPECT_EQ(ROTL(0x55555555u, 1), 0xAAAAAAAAu);		// overflow the input

	EXPECT_EQ(ROTL(0x00000001u, 32), 0x00000001u);		// overflow the rotation

	// Test cases for ROTR
	EXPECT_EQ(ROTR(0x00000000u, 1), 0x00000000u);		// check if 0 stays 0
	EXPECT_EQ(ROTR(0xFFFFFFFFu, 1), 0xFFFFFFFFu);		// check if -1 stays -1
	EXPECT_EQ(ROTR(0xFFFFFFFFu, 20), 0xFFFFFFFFu);		// check if -1 stays -1
	EXPECT_EQ(ROTR(0x00000002u, 1), 0x00000001u);		// standard check
	EXPECT_EQ(ROTR(0x80000000u, 1), 0x40000000u);		// standard check higher value

	EXPECT_EQ(ROTR(0x00000001u, 1), 0x80000000u);		// overflow the input
	EXPECT_EQ(ROTR(0xAAAAAAAAu, 1), 0x55555555u);		// overflow the input

	EXPECT_EQ(ROTR(0x00000001u, 32), 0x00000001u);		// overflow the rotation
}

TEST(sha256, Logical_func)
{
	// Test cases for Ch
	EXPECT_EQ(Ch(0, 0, 0), 0);
	EXPECT_EQ(Ch(1, 0, 0), 0);
	EXPECT_EQ(Ch(0, 1, 0), 0);
	EXPECT_EQ(Ch(0, 0, 1), 1);
	EXPECT_EQ(Ch(1, 1, 0), 1);
	EXPECT_EQ(Ch(1, 0, 1), 0);
	EXPECT_EQ(Ch(0, 1, 1), 1);
	EXPECT_EQ(Ch(1, 1, 1), 1);

	// Test cases for Maj
	EXPECT_EQ(Maj(0, 0, 0), 0);
	EXPECT_EQ(Maj(1, 0, 0), 0);
	EXPECT_EQ(Maj(0, 1, 0), 0);
	EXPECT_EQ(Maj(0, 0, 1), 0);
	EXPECT_EQ(Maj(1, 1, 0), 1);
	EXPECT_EQ(Maj(1, 0, 1), 1);
	EXPECT_EQ(Maj(0, 1, 1), 1);
	EXPECT_EQ(Maj(1, 1, 1), 1);
}

TEST(sha256, Sigma_func)
{
	// Test cases for BSIG0
	EXPECT_EQ(BSIG0(0x00000000u), 0x00000000u);
	EXPECT_EQ(BSIG0(0xFFFFFFFFu), 0xFFFFFFFFu);

	EXPECT_EQ(BSIG0(0x0000007Fu), 0xC3F9FC1Fu); //       127
	EXPECT_EQ(BSIG0(0x000007FFu), 0xFFE7FDFFu); //      2047
	EXPECT_EQ(BSIG0(0x0000184Fu), 0x02193A13u); //      6223
	EXPECT_EQ(BSIG0(0x007FFFFFu), 0xC0180001u); //   8388607
	EXPECT_EQ(BSIG0(0x01343CACu), 0x35DFB68Eu); //  20200620
	EXPECT_EQ(BSIG0(0x0202E912u), 0xC3B4E25Bu); //  33745170
	EXPECT_EQ(BSIG0(0x1FFFFFFFu), 0xC7F8FC7Fu); // 536870911
	EXPECT_EQ(BSIG0(0x26DE0C36u), 0x90366D66u); // 652086326

	// Test cases for BSIG1
	EXPECT_EQ(BSIG1(0x00000000u), 0x00000000u);
	EXPECT_EQ(BSIG1(0xFFFFFFFFu), 0xFFFFFFFFu);

	EXPECT_EQ(BSIG1(0x0000007Fu), 0xF3E03F81u); //       127
	EXPECT_EQ(BSIG1(0x000007FFu), 0x03E3FF9Fu); //      2047
	EXPECT_EQ(BSIG1(0x0000184Fu), 0x35EC27E2u); //      6223
	EXPECT_EQ(BSIG1(0x007FFFFFu), 0x3C1E0F80u); //   8388607
	EXPECT_EQ(BSIG1(0x01343CACu), 0xBF9AA075u); //  20200620
	EXPECT_EQ(BSIG1(0x0202E912u), 0x6B3CC2F8u); //  33745170
	EXPECT_EQ(BSIG1(0x1FFFFFFFu), 0xFC63FF8Fu); // 536870911
	EXPECT_EQ(BSIG1(0x26DE0C36u), 0x3159B8E2u); // 652086326

	//Test cases for SSIG0
	EXPECT_EQ(SSIG0(0x00000000u), 0x00000000u);
	EXPECT_EQ(SSIG0(0xFFFFFFFFu), 0x1FFFFFFFu);

	EXPECT_EQ(SSIG0(0x0000007Fu), 0xFE1FC00Fu); //       127
	EXPECT_EQ(SSIG0(0x000007FFu), 0xFFFFC0F0u); //      2047
	EXPECT_EQ(SSIG0(0x0000184Fu), 0x9813C339u); //      6223
	EXPECT_EQ(SSIG0(0x007FFFFFu), 0x01F0C01Fu); //   8388607
	EXPECT_EQ(SSIG0(0x01343CACu), 0x570FEFA1u); //  20200620
	EXPECT_EQ(SSIG0(0x0202E912u), 0x9E00D870u); //  33745170
	EXPECT_EQ(SSIG0(0x1FFFFFFFu), 0x023FC7FFu); // 536870911
	EXPECT_EQ(SSIG0(0x26DE0C36u), 0xEB9BF429u); // 652086326

	//Test cases for SSIG1
	EXPECT_EQ(SSIG1(0x00000000u), 0x00000000u);
	EXPECT_EQ(SSIG1(0xFFFFFFFFu), 0x003FFFFFu);

	EXPECT_EQ(SSIG1(0x0000007Fu), 0x00306000u); //       127
	EXPECT_EQ(SSIG1(0x000007FFu), 0x03006001u); //      2047
	EXPECT_EQ(SSIG1(0x0000184Fu), 0x0F2E6006u); //      6223
	EXPECT_EQ(SSIG1(0x007FFFFFu), 0x00007FCFu); //   8388607
	EXPECT_EQ(SSIG1(0x01343CACu), 0x99C3CDB3u); //  20200620
	EXPECT_EQ(SSIG1(0x0202E912u), 0x29ABC1FBu); //  33745170
	EXPECT_EQ(SSIG1(0x1FFFFFFFu), 0x000793FFu); // 536870911
	EXPECT_EQ(SSIG1(0x26DE0C36u), 0xC7946037u); // 652086326
}
